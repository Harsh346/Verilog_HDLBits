An adder-subtractor can be built from an adder by optionally negating one of the inputs, which is equivalent to inverting the input then adding 1. The net result is a circuit that can do two operations: (a + b + 0) and (a + ~b + 1). 
See 'https://en.wikipedia.org/wiki/Adder%E2%80%93subtractor' if you want a more detailed explanation of how this circuit works.

Problem:
Build the adder-subtractor below.
You are provided with a 16-bit adder module, which you need to instantiate twice:
module add16 ( input[15:0] a, input[15:0] b, input cin, output[15:0] sum, output cout );
Use a 32-bit wide XOR gate to invert the b input whenever sub is 1. (This can also be viewed as b[31:0] XORed with sub replicated 32 times. See replication operator.). Also connect the sub input to the carry-in of the adder.

Solution:
module top_module(
    input [31:0] a,
    input [31:0] b,
    input sub,
    output [31:0] sum
);
    wire [31:0] xor_in, b_in;	wire cout_1, cout;
    assign xor_in = {32{sub}};
    assign b_in = b^xor_in;
    add16 inst_1 (a[15:0], b_in[15:0], sub, sum[15:0], cout_1);
    add16 inst_2 (a[31:16], b_in[31:16], cout_1, sum[31:16], cout);

endmodule
